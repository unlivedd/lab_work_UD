import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config import BOT_TOKEN
from db import add_task, get_tasks, update_task, delete_tasks_by_date
from datetime import datetime


bot = Bot(token=BOT_TOKEN)


dp = Dispatcher()


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    text = (
        "/add <—Ç–µ–∫—Å—Ç> <–¥–∞—Ç–∞> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM)\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/done <ID> - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
        "/delete <–¥–∞—Ç–∞> - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É\n"
    )
    await message.answer(text)

@dp.message(Command("add"))
async def add_task_handler(message: types.Message):
    try:
        match = re.search(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2})$', message.text)
        if not match:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        
        deadline_str = match.group(1)
        text = message.text.replace(f"/add {deadline_str}", "").strip()
        
        deadline = datetime.strptime(deadline_str, "%Y-%m-%d %H:%M")
        
        user_id = message.from_user.id
        add_task(user_id, text, deadline)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except ValueError as ve:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {ve}")
    except Exception:
        await message.answer("‚ùå –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ 2025-03-22 15:30")

@dp.message(Command("list"))
async def list_tasks(message: types.Message):
    user_id = message.from_user.id
    tasks = get_tasks(user_id)
    if not tasks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    now = datetime.now()
    for task in tasks:
        try:
            if isinstance(task["deadline"], str):
                deadline = datetime.strptime(task["deadline"], "%Y-%m-%d %H:%M")
            else:
                deadline = task["deadline"]
            
            days_left = (deadline - now).days
            hours_left = (deadline - now).seconds // 3600
            status = "‚úÖ" if task.get("completed", False) else "‚ùå"
            response += (
                f"{task['_id']} | {task['text']} | "
                f"{deadline.strftime('%Y-%m-%d %H:%M')} | "
                f"{status} (–û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω. {hours_left} —á.)\n"
            )
        except Exception as e:
            response += f"{task['_id']} | üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}\n"

    await message.answer(response)

@dp.message(Command("done"))
async def complete_task(message: types.Message):
    try:
        _, task_id = message.text.split(maxsplit=1)
        modified_count = update_task(task_id, completed=True)
        
        if modified_count == 0:
            await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        else:
            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /done <ID>")

@dp.message(Command("delete"))
async def delete_task_handler(message: types.Message):
    try:
        _, date = message.text.split(maxsplit=1)
        user_id = message.from_user.id
        delete_tasks_by_date(user_id, date)
        await message.answer("–ó–∞–¥–∞—á–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω—ã!")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–¥–∞—Ç–∞> (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD)")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
